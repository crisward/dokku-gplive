#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/common-functions"
GPCONFIG_DIR="$DOKKU_ROOT/.gitpushcache"

gplive_main_cmd() {
  declare desc="outputs data for syncing with gplive"
  local cmd="gplive"
  local app
  local cachefiles
  local dokku_apps=$(ls -d $DOKKU_ROOT/*/ 2>/dev/null) || (dokku_log_fail "You haven't deployed any applications yet")
  local plugins=$(ls -d $PLUGIN_AVAILABLE_PATH/*/ 2>/dev/null)
  local dokkuversion=$(dokku version | grep -Po '(?=\d{1,2}\.)(\d+)\.\d+')
  # make cach dir
  local cachedir=$GPCONFIG_DIR
  [ -d $cachedir ] || mkdir $cachedir
  # empty last cache files
  [ -d $cachedir ] && rm -f $cachedir/*.urls && rm -f $cachedir/*.options 
  # loop over apps, getting all docker options and urls asynchronously
  for dokku_app in $dokku_apps; do
    APP=$(basename $dokku_app)
    if [ "$(printf '%s\n' "0.8.0" "$dokkuversion" | sort -V | head -n1)" = "0.8.0" ]
    then
      dokku docker-options:report $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    else 
      dokku docker-options $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    fi
  done
  wait
  # loop over cached files, stick together to be processed by server
  cachefiles=$(ls -A $cachedir 2>/dev/null)
  for cachepath in $cachefiles; do
    #cachfile=$(basename $cachepath)
    echo "#----- $cachepath"
    echo "$(cat $cachedir/$cachepath)"
  done
  echo "#----- apps.list"
  dokku apps:list
}

gplive_list_cmd(){
  declare desc="list server domains"
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    echo "$URL"
  done 
}

gplive_add_cmd(){
  declare desc="add server domain"
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  regex='^https?://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  URL="$2"
  # check if new domain exists in existing
  if [[ "$BASE_URL" == *"$URL"* ]]; then
    echo "That domain has already been added"
  elif [[ $URL =~ $regex ]]; then 
    NEWURL="$BASE_URL $URL" # append
    echo "$NEWURL" > "$GPCONFIG_DIR/URLS"
  else 
    echo "That does not appear to be a valid domain. Make sure it has a protocol and full domain eg https://gitpushlive.com"
  fi
}

gplive_remove_cmd(){
  declare desc="remove server domain"
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  REMOVE="$2"
  NEWURLS=""
  for URL in "${array[@]}"
  do
    if [[ "$REMOVE" == *"$URL"* ]]; then
      echo "removing $URL"
    else 
      NEWURLS="$NEWURLS $URL"
    fi
  done 
  # not sure this is working, needes testing
  echo "$NEWURL" > "$GPCONFIG_DIR/URLS"
}

gplive_sendstats_cmd() {
  declare desc="sends simple stats to server"
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  CPUCORES=$(grep pro /proc/cpuinfo -c) # ie 1-4
  CPULOAD=$(cat /proc/loadavg | awk '{printf "%d",$1*100/var}' var="$CPUCORES") #percentage
  TOTALMEM=$(cat /proc/meminfo | grep MemTotal: | awk '{printf $2}')
  MEMFREE=$(cat /proc/meminfo | grep MemAvailable: | awk '{printf $2}' || echo "")
  if [ -z "$MEMFREE" ];then
    MEMORYUSED=$(free | awk '/buffers\/cache/{printf "%d",100-($4/($3+$4) * 100.0) }') # ubuntu 14
  else 
    MEMORYUSED=$(awk -v tm="$TOTALMEM" -v mf="$MEMFREE" "BEGIN {a=100-(mf / tm * 100); print a}") # percentage
  fi
  DISKUSAGE=$(df -h | awk '$NF=="/"{printf "%s", $5}')
  : ${DISKUSAGE:="0"}
  DISKUSAGE="${DISKUSAGE//\%/''}" #remove percentage symbol
  for URL in "${array[@]}"
  do
    newversion=$(curl -sH "Content-Type: application/json" -X POST -d "{\"cpu\":$CPULOAD,\"mem\":$MEMORYUSED,\"dsk\":$DISKUSAGE}" "$URL/duocms/api/servers/stats")
  done
}


gplive_sendstate_cmd(){
  declare desc="sends dokku state to server(s)"
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  "$PLUGIN_AVAILABLE_PATH/gplive/bin/state.py"
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    newversion=$(curl -sH "Content-Type: application/json" --retry 2 --retry-max-time 30 -X POST --data "@/home/dokku/.gitpushcache/state.json"  "$URL/duocms/api/dokku/state")
  done
}

gplive_updateapp_cmd() {
  declare desc="sends app info to servers"

  APP="$1"
  APP_ROOT="$2"
  STATUS="$3"
  # collect all data to update gitpushlive
  CONTAINER=""
  DOCKER_OPTIONS_DEPLOY=""
  DOCKER_OPTIONS_BUILD=""
  DOCKER_OPTIONS_RUN=""
  DOMAINS=""
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_DEPLOY" ]; then
    DOCKER_OPTIONS_DEPLOY=$(cat "$APP_ROOT/DOCKER_OPTIONS_DEPLOY")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_BUILD" ]; then
    DOCKER_OPTIONS_BUILD=$(cat "$APP_ROOT/DOCKER_OPTIONS_BUILD")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_RUN" ]; then
    DOCKER_OPTIONS_RUN=$(cat "$APP_ROOT/DOCKER_OPTIONS_RUN")
  fi
  if [ -f "$APP_ROOT/VHOST" ]; then
    DOMAINS=$(cat "$APP_ROOT/VHOST")
  fi
  if [ -f "$APP_ROOT/CONTAINER.web.1" ]; then
    CONTAINER=$(cat "$APP_ROOT/CONTAINER.web.1")
  fi
  BASE_URL=${GITPUSHLIVE_BASE_URL-'https://gitpushlive.com'}
  if [ -f "$GPCONFIG_DIR/URLS" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/URLS")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    dokku_log_info1 "Notifying gitpushlive... $URL"
    curl "$URL/duocms/api/dokku" --silent \
      --data "app[name]=$APP" \
      --data "app[meta][container_id]=${CONTAINER:0:12}" \
      --data "app[meta][container_type]=web" \
      --data "app[meta][status]=$STATUS" \
      --data "app[domains]=$DOMAINS" \
      --data "app[docker_options][deploy]=$DOCKER_OPTIONS_DEPLOY" \
      --data "app[docker_options][build]=$DOCKER_OPTIONS_BUILD" \
      --data "app[docker_options][run]=$DOCKER_OPTIONS_RUN" > /dev/null
  done 
  exit 0
}

gplive_configbackups_cmd(){
  declare desc="config backup settings"
  local id="$2"
  local key="$3"
  local bucket="$4"
  local dir="$5"
  local hour="$6"
  # test before saving
  echo "$id" > "$GPCONFIG_DIR/BACKUP_ID"
  echo "$key" > "$GPCONFIG_DIR/BACKUP_KEY"
  echo "$bucket" > "$GPCONFIG_DIR/BACKUP_BUCKET"
  echo "$dir" > "$GPCONFIG_DIR/BACKUP_DIR"
  echo "$hour" > "$GPCONFIG_DIR/BACKUP_HOUR"
  echo "Backup Setting Updated"
}

gplive_autobackup_cmd(){
  declare desc="runs backups if hour matches config, intended to be run by cron"
  # get config
  if [ -f "$GPCONFIG_DIR/BACKUP_HOUR" ];then
    GITPUSHLIVE_BACKUP_HOUR=$(<"$GPCONFIG_DIR/BACKUP_HOUR")
  fi
  # check if hour is current hour, $(( +0)) converts to int as date outputs eg 02
  local currentHour=$(date +%H)
  if [ $(($currentHour+0)) = $(($GITPUSHLIVE_BACKUP_HOUR+0)) ]; then
    gplive_backup_cmd
  fi
}

gplive_backup_cmd(){
  declare desc="runs backups"
  # get backup settings
  if [ -f "$GPCONFIG_DIR/BACKUP_ID" ] && [ -f "$GPCONFIG_DIR/BACKUP_KEY" ] && [ -f "$GPCONFIG_DIR/BACKUP_BUCKET" ] &&  [ -f "$GPCONFIG_DIR/BACKUP_DIR" ];then
    GITPUSHLIVE_BACKUP_ID=$(<"$GPCONFIG_DIR/BACKUP_ID")
    GITPUSHLIVE_BACKUP_KEY=$(<"$GPCONFIG_DIR/BACKUP_KEY")
    GITPUSHLIVE_BACKUP_BUCKET=$(<"$GPCONFIG_DIR/BACKUP_BUCKET")
    GITPUSHLIVE_BACKUP_DIR=$(<"$GPCONFIG_DIR/BACKUP_DIR")
    # get backups
    if [ -f "$GPCONFIG_DIR/BACKUPS" ];then
      trap "rm -rf /tmp/gplbackups/ > /dev/null" EXIT # remove temp dir
      IFS=$'\n' #set internal field separator to newline for cat
      for line in $(cat "$GPCONFIG_DIR/BACKUPS");
      do
        # create and run each one
        IFS=$' \t\n'
        read -a strparts <<< "$line"
        local type=${strparts[0]}
        local name=${strparts[1]}
        local dir=${strparts[2]}
        if [ "$type" = "volume" ];then
          if [ -d "$name" ]; then 
            docker run --rm \
            -e "AWS_ACCESS_KEY_ID=$GITPUSHLIVE_BACKUP_ID" \
            -e "AWS_SECRET_ACCESS_KEY=$GITPUSHLIVE_BACKUP_KEY" \
            -v "${name}:/backup/" \
            amazon/aws-cli s3 sync /backup/ s3://$GITPUSHLIVE_BACKUP_BUCKET/$GITPUSHLIVE_BACKUP_DIR/$dir  </dev/null && backupNotify $GPCONFIG_DIR $name $type "success" || backupNotify $GPCONFIG_DIR $name $type "failed"
          else 
            # send failed backup to gitpush
            backupNotify $GPCONFIG_DIR $name $type "failed"
          fi
        else 
          if [ -d "/var/lib/dokku/services/$type/$name" ]; then # check it exists
            local backupdir="/tmp/gplbackups/"
            [ -d $backupdir ] || mkdir "$backupdir"
            local filename="$name-$type-$(date +"%Y%m%d-%H%M").gz"
            faketty dokku "$type:export" $name | gzip -9c > "$backupdir$filename"
            docker run --rm \
            -e "AWS_ACCESS_KEY_ID=$GITPUSHLIVE_BACKUP_ID" \
            -e "AWS_SECRET_ACCESS_KEY=$GITPUSHLIVE_BACKUP_KEY" \
            -v "$backupdir:/backup/" \
            amazon/aws-cli s3 cp /backup/$filename s3://$GITPUSHLIVE_BACKUP_BUCKET/$GITPUSHLIVE_BACKUP_DIR/$type/$filename </dev/null && backupNotify $GPCONFIG_DIR $name $type "success" || backupNotify $GPCONFIG_DIR $name $type "failed"
          else 
            # send failed backups to gitpush
            backupNotify $GPCONFIG_DIR $name $type "failed"
          fi
        fi 
        # tell gitpush about each backup
      done
    fi
  fi
}

gplive_addbackup_cmd(){
  local type=$2
  local name=$3
  local dir=$4
  local GITPUSHLIVE_BACKUPS=""
  local entry=""
  if [ -f "$GPCONFIG_DIR/BACKUPS" ];then
    GITPUSHLIVE_BACKUPS=$(<"$GPCONFIG_DIR/BACKUPS")
  fi
  if [ "$type" = "volume" ];then
    [ -d "$name" ] || dokku_log_fail "$type $name does not exist"
    [ $dir ] || dokku_log_fail "you must supply an remote directory as the third parameter to backup a volume"
    entry="$type $name $dir"
  else
    # check plugin is installed
    plugn list | awk '{print $1}' | grep -q "^${type}$" ||  dokku_log_fail "$type is not an installed plugin" 
    # check name is valid
    is_valid_service_name "$name" || dokku_log_fail "Please specify a valid name for the service. Valid characters are: [A-Za-z0-9_]+"
    # check serice exists
    [ -d "/var/lib/dokku/services/$type/$name" ] || dokku_log_fail "$type $name does not exist"    
    entry="$type $name"
  fi
  # check if new backup exists in existing
  if [[ "$GITPUSHLIVE_BACKUPS" == *"$entry"* ]]; then
    dokku_log_fail "That backup has already been added"
  else
    echo "$entry" >> "$GPCONFIG_DIR/BACKUPS"
  fi
   backupNotify $GPCONFIG_DIR $name $type "added"
  dokku_log_info2 "$type $name has been added to the scheduled backups"
}


gplive_removebackup_cmd(){
  local type=$2
  local name=$3
  local GITPUSHLIVE_BACKUPS=""
  if [ -f "$GPCONFIG_DIR/BACKUPS" ];then
    GITPUSHLIVE_BACKUPS=$(<"$GPCONFIG_DIR/BACKUPS")
  fi
  if [ "$type" = "volume" ];then
    [ -d "$name" ] || dokku_log_fail "$type $name does not exist"
  else
    plugn list | awk '{print $1}' | grep -q "^${type}$" || dokku_log_fail "$type is not an installed plugin" 
    is_valid_service_name "$name" || dokku_log_fail "Please specify a valid name for the service. Valid characters are: [A-Za-z0-9_]+"
  fi
  local entry="$type $name"
  if [[ "$GITPUSHLIVE_BACKUPS" == *"$entry"* ]]; then
    sed -i "s,$entry.*$,,g" "$GPCONFIG_DIR/BACKUPS" # remove backup
    sed -i '/^$/d' "$GPCONFIG_DIR/BACKUPS" # remove blank lines
  else
    dokku_log_fail "That backup does not exist"
  fi
  # Notify
  backupNotify $GPCONFIG_DIR $name $type "removed"
  dokku_log_info2 "$entry has been removed from the scheduled backups"
}

gplive_listbackups_cmd(){
  local GITPUSHLIVE_BACKUPS=""
  if [ -f "$GPCONFIG_DIR/BACKUPS" ];then
    GITPUSHLIVE_BACKUPS=$(<"$GPCONFIG_DIR/BACKUPS")
  fi
  if [ "$GITPUSHLIVE_BACKUPS" = "" ];then 
    dokku_log_warn "There are no backups setup"
  else 
    dokku_log_info2_quiet "Backups"
    echo "$GITPUSHLIVE_BACKUPS"
  fi
}