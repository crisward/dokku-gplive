#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"

gplive_main_cmd() {
  declare desc="outputs data for syncing with gplive"
  local cmd="gplive"
  local app
  local cachefiles
  local dokku_apps=$(ls -d $DOKKU_ROOT/*/ 2>/dev/null) || (dokku_log_fail "You haven't deployed any applications yet")
  local plugins=$(ls -d $PLUGIN_AVAILABLE_PATH/*/ 2>/dev/null)
  local dokkuversion=$(dokku version)
  # make cach dir
  local cachedir=$DOKKU_ROOT/.gitpushcache
  [ -d $cachedir ] || mkdir $cachedir
  # empty last cache files
  [ -d $cachedir ] && rm -f $cachedir/*.urls && rm -f $cachedir/*.options 
  # loop over apps, getting all docker options and urls asynchronously
  for dokku_app in $dokku_apps; do
    APP=$(basename $dokku_app)
    if [ "$(printf '%s\n' "0.8.0" "$dokkuversion" | sort -V | head -n1)" = "0.8.0" ]
    then
      dokku docker-options:report $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    else 
      dokku docker-options $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    fi
  done
  wait
  # loop over cached files, stick together to be processed by server
  cachefiles=$(ls -A $cachedir 2>/dev/null)
  for cachepath in $cachefiles; do
    #cachfile=$(basename $cachepath)
    echo "#----- $cachepath"
    echo "$(cat $cachedir/$cachepath)"
  done
  echo "#----- apps.list"
  dokku ls
}

gplive_sendstats_cmd() {
  declare desc="sends simple stats to server"
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  CPUCORES=$(grep pro /proc/cpuinfo -c) # ie 1-4
  CPULOAD=$(cat /proc/loadavg | awk '{printf "%d",$1*100/var}' var="$CPUCORES") #percentage
  if [[ `lsb_release -rs` == "16.04" || `lsb_release -rs` == "18.04" ]]
  then
    MEMORYUSED=$(free | awk '/Mem:/{printf "%d",100-(($7/$2) * 100.0) }') #$2 = total $7=available
  else
    MEMORYUSED=$(free | awk '/buffers\/cache/{printf "%d",100-($4/($3+$4) * 100.0) }')
  fi
  : ${MEMORYUSED:="0"}
  DISKUSAGE=$(df -h | awk '$NF=="/"{printf "%s", $5}')
  : ${DISKUSAGE:="0"}
  DISKUSAGE="${DISKUSAGE//\%/''}" #remove percentage symbol
  echo "base = $BASE_URL"
  newversion=$(curl -sH "Content-Type: application/json" -X POST -d "{\"cpu\":$CPULOAD,\"mem\":$MEMORYUSED,\"dsk\":$DISKUSAGE}" "$BASE_URL/duocms/api/servers/stats")
  if test `find "$PLUGIN_AVAILABLE_PATH/gplive/plugin.toml" -mmin +60` ;then #only check once per hour, if file has recently updated
    currentversion=$(cat $PLUGIN_AVAILABLE_PATH/gplive/plugin.toml | grep "version.*" | grep -o [0-9.]*)
    if [ "$newversion" == "$currentversion" ] ; then
      echo "already up to date"
    else
      echo "updating to $newversion"
      cd $PLUGIN_AVAILABLE_PATH/gplive/ && git pull origin master
    fi
  fi
}

gplive_updateapp_cmd() {
  declare desc="sends app info to server"

  APP="$1"
  APP_ROOT="$2"
  STATUS="$3"
  # collect all data to update gitpushlive
  CONTAINER=""
  DOCKER_OPTIONS_DEPLOY=""
  DOCKER_OPTIONS_BUILD=""
  DOCKER_OPTIONS_RUN=""
  DOMAINS=""
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_DEPLOY" ]; then
    DOCKER_OPTIONS_DEPLOY=$(cat "$APP_ROOT/DOCKER_OPTIONS_DEPLOY")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_BUILD" ]; then
    DOCKER_OPTIONS_BUILD=$(cat "$APP_ROOT/DOCKER_OPTIONS_BUILD")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_RUN" ]; then
    DOCKER_OPTIONS_RUN=$(cat "$APP_ROOT/DOCKER_OPTIONS_RUN")
  fi
  if [ -f "$APP_ROOT/VHOST" ]; then
    DOMAINS=$(cat "$APP_ROOT/VHOST")
  fi
  if [ -f "$APP_ROOT/CONTAINER.web.1" ]; then
    CONTAINER=$(cat "$APP_ROOT/CONTAINER.web.1")
  fi
  BASE_URL=${GITPUSHLIVE_BASE_URL-'https://gitpushlive.com'}
  dokku_log_info1 "Notifying gitpushlive... $BASE_URL"
  curl "$BASE_URL/duocms/api/dokku" --silent \
    --data "app[name]=$APP" \
    --data "app[meta][container_id]=${CONTAINER:0:12}" \
    --data "app[meta][container_type]=web" \
    --data "app[meta][status]=$STATUS" \
    --data "app[domains]=$DOMAINS" \
    --data "app[docker_options][deploy]=$DOCKER_OPTIONS_DEPLOY" \
    --data "app[docker_options][build]=$DOCKER_OPTIONS_BUILD" \
    --data "app[docker_options][run]=$DOCKER_OPTIONS_RUN" > /dev/null
  exit 0
}
