#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x
source "$PLUGIN_CORE_AVAILABLE_PATH/common/functions"
GPCONFIG_DIR="$DOKKU_ROOT/.gitpushcache"

gplive_main_cmd() {
  declare desc="outputs data for syncing with gplive"
  local cmd="gplive"
  local app
  local cachefiles
  local dokku_apps=$(ls -d $DOKKU_ROOT/*/ 2>/dev/null) || (dokku_log_fail "You haven't deployed any applications yet")
  local plugins=$(ls -d $PLUGIN_AVAILABLE_PATH/*/ 2>/dev/null)
  local dokkuversion=$(dokku version | grep -Po '(?=\d{1,2}\.)(\d+)\.\d+')
  # make cach dir
  local cachedir=$DOKKU_ROOT/.gitpushcache
  [ -d $cachedir ] || mkdir $cachedir
  # empty last cache files
  [ -d $cachedir ] && rm -f $cachedir/*.urls && rm -f $cachedir/*.options 
  # loop over apps, getting all docker options and urls asynchronously
  for dokku_app in $dokku_apps; do
    APP=$(basename $dokku_app)
    if [ "$(printf '%s\n' "0.8.0" "$dokkuversion" | sort -V | head -n1)" = "0.8.0" ]
    then
      dokku docker-options:report $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    else 
      dokku docker-options $APP > $cachedir/$APP.options &
      dokku urls $APP > $cachedir/$APP.urls &
    fi
  done
  wait
  # loop over cached files, stick together to be processed by server
  cachefiles=$(ls -A $cachedir 2>/dev/null)
  for cachepath in $cachefiles; do
    #cachfile=$(basename $cachepath)
    echo "#----- $cachepath"
    echo "$(cat $cachedir/$cachepath)"
  done
  echo "#----- apps.list"
  dokku apps:list
}

gplive_list_cmd(){
  declare desc="list server domains"
  if [ -f "$GPCONFIG_DIR/gplive.config" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/gplive.config")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    echo "$URL"
  done 
}

gplive_add_cmd(){
  declare desc="add server domain"
  if [ -f "$GPCONFIG_DIR/gplive.config" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/gplive.config")
  fi
  regex='^https?://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]$'
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  URL="$2"
  # check if new domain exists in existing
  if [[ "$BASE_URL" == *"$URL"* ]]; then
    echo "That domain has already been added"
  elif [[ $URL =~ $regex ]]; then 
    NEWURL="$BASE_URL $URL" # append
    echo "$NEWURL" > "$GPCONFIG_DIR/gplive.config"
  else 
    echo "That does not appear to be a valid domain. Make sure it has a protocol and full domain eg https://gitpushlive.com"
  fi
}

gplive_remove_cmd(){
  declare desc="remove server domain"
  if [ -f "$GPCONFIG_DIR/gplive.config" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/gplive.config")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  REMOVE="$2"
  NEWURLS=""
  for URL in "${array[@]}"
  do
    if [[ "$REMOVE" == *"$URL"* ]]; then
      echo "removing $URL"
    else 
      NEWURLS="$NEWURLS $URL"
    fi
  done 
  echo "$NEWURL" > "$GPCONFIG_DIR/gplive.config"
}

gplive_sendstats_cmd() {
  declare desc="sends simple stats to server"
  if [ -f "$GPCONFIG_DIR/gplive.config" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/gplive.config")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    CPUCORES=$(grep pro /proc/cpuinfo -c) # ie 1-4
    CPULOAD=$(cat /proc/loadavg | awk '{printf "%d",$1*100/var}' var="$CPUCORES") #percentage
    TOTALMEM=$(cat /proc/meminfo | grep MemTotal: | awk '{printf $2}')
    MEMFREE=$(cat /proc/meminfo | grep Inactive: | awk '{printf $2}')
    MEMORYUSED=$(awk -v tm="$TOTALMEM" -v mf="$MEMFREE" "BEGIN {a=mf / tm * 100; print a}") # percentage
    DISKUSAGE=$(df -h | awk '$NF=="/"{printf "%s", $5}')
    : ${DISKUSAGE:="0"}
    DISKUSAGE="${DISKUSAGE//\%/''}" #remove percentage symbol
    echo "base = $URL"
    newversion=$(curl -sH "Content-Type: application/json" -X POST -d "{\"cpu\":$CPULOAD,\"mem\":$MEMORYUSED,\"dsk\":$DISKUSAGE}" "$URL/duocms/api/servers/stats")
  done
  if test `find "$PLUGIN_AVAILABLE_PATH/gplive/plugin.toml" -mmin +60` ;then #only check once per hour, if file has recently updated
    currentversion=$(cat $PLUGIN_AVAILABLE_PATH/gplive/plugin.toml | grep "version.*" | grep -o [0-9.]*)
    if [ "$newversion" == "$currentversion" ] ; then
      echo "already up to date"
    else
      echo "updating to $newversion"
      cd $PLUGIN_AVAILABLE_PATH/gplive/ && git pull origin master
    fi
  fi
}

gplive_updateapp_cmd() {
  declare desc="sends app info to servers"

  APP="$1"
  APP_ROOT="$2"
  STATUS="$3"
  # collect all data to update gitpushlive
  CONTAINER=""
  DOCKER_OPTIONS_DEPLOY=""
  DOCKER_OPTIONS_BUILD=""
  DOCKER_OPTIONS_RUN=""
  DOMAINS=""
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_DEPLOY" ]; then
    DOCKER_OPTIONS_DEPLOY=$(cat "$APP_ROOT/DOCKER_OPTIONS_DEPLOY")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_BUILD" ]; then
    DOCKER_OPTIONS_BUILD=$(cat "$APP_ROOT/DOCKER_OPTIONS_BUILD")
  fi
  if [ -f "$APP_ROOT/DOCKER_OPTIONS_RUN" ]; then
    DOCKER_OPTIONS_RUN=$(cat "$APP_ROOT/DOCKER_OPTIONS_RUN")
  fi
  if [ -f "$APP_ROOT/VHOST" ]; then
    DOMAINS=$(cat "$APP_ROOT/VHOST")
  fi
  if [ -f "$APP_ROOT/CONTAINER.web.1" ]; then
    CONTAINER=$(cat "$APP_ROOT/CONTAINER.web.1")
  fi
  BASE_URL=${GITPUSHLIVE_BASE_URL-'https://gitpushlive.com'}
  if [ -f "$GPCONFIG_DIR/gplive.config" ];then
    GITPUSHLIVE_BASE_URL=$(<"$GPCONFIG_DIR/gplive.config")
  fi
  [ -z "$GITPUSHLIVE_BASE_URL" ] && BASE_URL='https://gitpushlive.com' || BASE_URL=$GITPUSHLIVE_BASE_URL
  BASE_URLS=' ' read -r -a array <<< "$BASE_URL" # convert to array, incase multiple servers
  for URL in "${array[@]}"
  do
    dokku_log_info1 "Notifying gitpushlive... $URL"
    curl "$URL/duocms/api/dokku" --silent \
      --data "app[name]=$APP" \
      --data "app[meta][container_id]=${CONTAINER:0:12}" \
      --data "app[meta][container_type]=web" \
      --data "app[meta][status]=$STATUS" \
      --data "app[domains]=$DOMAINS" \
      --data "app[docker_options][deploy]=$DOCKER_OPTIONS_DEPLOY" \
      --data "app[docker_options][build]=$DOCKER_OPTIONS_BUILD" \
      --data "app[docker_options][run]=$DOCKER_OPTIONS_RUN" > /dev/null
  done 
  exit 0
}